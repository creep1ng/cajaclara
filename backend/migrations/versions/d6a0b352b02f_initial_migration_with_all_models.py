"""Initial migration with all models

Revision ID: d6a0b352b02f
Revises: 
Create Date: 2025-10-28 19:26:37.438839

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd6a0b352b02f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.String(length=50), nullable=False, comment='ID de categoría (ej: cat-cafe)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Nombre de la categoría'),
    sa.Column('icon', sa.String(length=50), nullable=True, comment='Código de icono para UI'),
    sa.Column('color', sa.String(length=7), nullable=True, comment='Color hexadecimal (#RRGGBB)'),
    sa.Column('transaction_type', sa.String(length=20), nullable=False, comment='Tipo: income o expense'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripción de la categoría'),
    sa.Column('predefined', sa.Boolean(), nullable=False, comment='Si es categoría del sistema o personalizada'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización'),
    sa.PrimaryKeyConstraint('id'),
    comment='Categorías para clasificación de transacciones'
    )
    op.create_index(op.f('ix_categories_transaction_type'), 'categories', ['transaction_type'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email del usuario (único)'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Contraseña hasheada con bcrypt'),
    sa.Column('full_name', sa.String(length=255), nullable=True, comment='Nombre completo del usuario'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Usuario activo'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización'),
    sa.PrimaryKeyConstraint('id'),
    comment='Usuarios del sistema'
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('category_rules',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Usuario propietario'),
    sa.Column('category_id', sa.String(length=50), nullable=False, comment='Categoría a aplicar'),
    sa.Column('rule_name', sa.String(length=100), nullable=False, comment='Nombre descriptivo de la regla'),
    sa.Column('matching_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Criterios de coincidencia (keywords, amounts, vendors)'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Si la regla está activa'),
    sa.Column('times_applied', sa.Integer(), nullable=False, comment='Número de veces aplicada'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Reglas para categorización automática de transacciones'
    )
    op.create_index(op.f('ix_category_rules_enabled'), 'category_rules', ['enabled'], unique=False)
    op.create_index(op.f('ix_category_rules_user_id'), 'category_rules', ['user_id'], unique=False)
    op.create_table('entrepreneurships',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Usuario propietario'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Nombre del emprendimiento'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripción del emprendimiento'),
    sa.Column('business_type', sa.String(length=100), nullable=True, comment='Tipo de negocio (ej: retail, services, manufacturing)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Si el emprendimiento está activo'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Emprendimientos o negocios de los usuarios'
    )
    op.create_index(op.f('ix_entrepreneurships_is_active'), 'entrepreneurships', ['is_active'], unique=False)
    op.create_index(op.f('ix_entrepreneurships_user_id'), 'entrepreneurships', ['user_id'], unique=False)
    op.create_table('transactions',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Usuario propietario'),
    sa.Column('entrepreneurship_id', sa.UUID(), nullable=True, comment='Emprendimiento asociado (opcional)'),
    sa.Column('category_id', sa.String(length=50), nullable=True, comment='Categoría de la transacción'),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False, comment='Monto de la transacción'),
    sa.Column('currency', sa.String(length=3), nullable=False, comment='Moneda (ISO 4217)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Descripción o nota'),
    sa.Column('transaction_type', sa.String(length=20), nullable=False, comment='Tipo: income o expense'),
    sa.Column('classification', sa.String(length=20), nullable=False, comment='Clasificación: personal o business'),
    sa.Column('transaction_date', sa.DateTime(timezone=True), nullable=False, comment='Fecha y hora de la transacción'),
    sa.Column('sync_status', sa.String(length=20), nullable=False, comment='Estado de sincronización: pending, synced, failed'),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True, comment='Etiquetas adicionales'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Metadatos adicionales (source, ocr_confidence, etc.)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Identificador único'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de creación'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Fecha de última actualización'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Fecha de eliminación (soft delete)'),
    sa.Column('created_by', sa.UUID(), nullable=True, comment='Usuario que creó el registro'),
    sa.Column('updated_by', sa.UUID(), nullable=True, comment='Usuario que actualizó el registro'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['entrepreneurship_id'], ['entrepreneurships.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    comment='Transacciones financieras (ingresos y gastos)'
    )
    op.create_index('idx_transactions_category', 'transactions', ['category_id'], unique=False)
    op.create_index('idx_transactions_classification', 'transactions', ['classification'], unique=False)
    op.create_index('idx_transactions_date', 'transactions', ['transaction_date'], unique=False)
    op.create_index('idx_transactions_deleted', 'transactions', ['deleted_at'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('idx_transactions_entrepreneurship', 'transactions', ['entrepreneurship_id'], unique=False)
    op.create_index('idx_transactions_metadata', 'transactions', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_transactions_type', 'transactions', ['transaction_type'], unique=False)
    op.create_index('idx_transactions_user', 'transactions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_transactions_user', table_name='transactions')
    op.drop_index('idx_transactions_type', table_name='transactions')
    op.drop_index('idx_transactions_metadata', table_name='transactions', postgresql_using='gin')
    op.drop_index('idx_transactions_entrepreneurship', table_name='transactions')
    op.drop_index('idx_transactions_deleted', table_name='transactions', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('idx_transactions_date', table_name='transactions')
    op.drop_index('idx_transactions_classification', table_name='transactions')
    op.drop_index('idx_transactions_category', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index(op.f('ix_entrepreneurships_user_id'), table_name='entrepreneurships')
    op.drop_index(op.f('ix_entrepreneurships_is_active'), table_name='entrepreneurships')
    op.drop_table('entrepreneurships')
    op.drop_index(op.f('ix_category_rules_user_id'), table_name='category_rules')
    op.drop_index(op.f('ix_category_rules_enabled'), table_name='category_rules')
    op.drop_table('category_rules')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_categories_transaction_type'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
